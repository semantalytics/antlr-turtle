https://www.w3.org/TR/turtle/

6. Turtle Grammar

A Turtle document is a Unicode[UNICODE] character string encoded in UTF-8. Unicode characters only in the range U+0000 to U+10FFFF inclusive are allowed.
6.1 White Space

White space (production WS) is used to separate two terminals which would otherwise be (mis-)recognized as one terminal. Rule names below in capitals indicate where white space is significant; these form a possible choice of terminals for constructing a Turtle parser.

White space is significant in the production String.
6.2 Comments

Comments in Turtle take the form of '#', outside an IRIREF or String, and continue to the end of line (marked by characters U+000D or U+000A) or end of file if there is no end of line after the comment marker. Comments are treated as white space.

6.3 IRI References

Relative IRIs are resolved with base IRIs as per Uniform Resource Identifier (URI): Generic Syntax [RFC3986] using only the basic algorithm in section 5.2. Neither Syntax-Based Normalization nor Scheme-Based Normalization (described in sections 6.2.2 and 6.2.3 of RFC3986) are performed. Characters additionally allowed in IRI references are treated in the same way that unreserved characters are treated in URI references, per section 6.5 of Internationalized Resource Identifiers (IRIs) [RFC3987].

The @base or BASE directive defines the Base IRI used to resolve relative IRIs per RFC3986 section 5.1.1, "Base URI Embedded in Content". Section 5.1.2, "Base URI from the Encapsulating Entity" defines how the In-Scope Base IRI may come from an encapsulating document, such as a SOAP envelope with an xml:base directive or a mime multipart document with a Content-Location header. The "Retrieval URI" identified in 5.1.3, Base "URI from the Retrieval URI", is the URL from which a particular Turtle document was retrieved. If none of the above specifies the Base URI, the default Base URI (section 5.1.4, "Default Base URI") is used. Each @base or BASE directive sets a new In-Scope Base URI, relative to the previous one.
6.4 Escape Sequences

There are three forms of escapes used in turtle documents:

    numeric escape sequences represent Unicode code points:
    Escape sequence 	Unicode code point
    '\u' hex hex hex hex 	A Unicode character in the range U+0000 to U+FFFF inclusive corresponding to the value encoded by the four hexadecimal digits interpreted from most significant to least significant digit.
    '\U' hex hex hex hex hex hex hex hex 	A Unicode character in the range U+0000 to U+10FFFF inclusive corresponding to the value encoded by the eight hexadecimal digits interpreted from most significant to least significant digit.

    where HEX is a hexadecimal character

        HEX ::= [0-9] | [A-F] | [a-f]

    string escape sequences represent the characters traditionally escaped in string literals:
    Escape sequence 	Unicode code point
    '\t' 	U+0009
    '\b' 	U+0008
    '\n' 	U+000A
    '\r' 	U+000D
    '\f' 	U+000C
    '\"' 	U+0022
    '\'' 	U+0027
    '\\' 	U+005C

    reserved character escape sequences consist of a '\' followed by one of ~.-!$&'()*+,;=/?#@%_ and represent the character to the right of the '\'.

Context where each kind of escape sequence can be used 	numeric
escapes 	string
escapes 	reserved character
escapes
IRIs, used as RDF terms or as in @prefix, PREFIX, @base, or BASE declarations 	yes 	no 	no
local names 	no 	no 	yes
Strings 	yes 	yes 	no
Note

%-encoded sequences are in the character range for IRIs and are explicitly allowed in local names. These appear as a '%' followed by two hex characters and represent that same sequence of three characters. These sequences are not decoded during processing. A term written as <http://a.example/%66oo-bar> in Turtle designates the IRI http://a.example/%66oo-bar and not IRI http://a.example/foo-bar. A term written as ex:%66oo-bar with a prefix @prefix ex: <http://a.example/> also designates the IRI http://a.example/%66oo-bar.
6.5 Grammar

The EBNF used here is defined in XML 1.0 [EBNF-NOTATION]. Production labels consisting of a number and a final 's', e.g. [60s], reference the production with that number in the SPARQL 1.1 Query Language grammar [SPARQL11-QUERY].

Notes:

    Keywords in single quotes ('@base', '@prefix', 'a', 'true', 'false') are case-sensitive. Keywords in double quotes ("BASE", "PREFIX") are case-insensitive.
    Escape sequences UCHAR and ECHAR are case sensitive.
    When tokenizing the input and choosing grammar rules, the longest match is chosen.
    The Turtle grammar is LL(1) and LALR(1) when the rules with uppercased names are used as terminals.
    The entry point into the grammar is turtleDoc.
    In signed numbers, no white space is allowed between the sign and the number.
    The [162s] ANON ::= '[' WS* ']' token allows any amount of white space and comments between []s. The single space version is used in the grammar for clarity.
    The strings '@prefix' and '@base' match the pattern for LANGTAG, though neither "prefix" nor "base" are registered language subtags. This specification does not define whether a quoted literal followed by either of these tokens (e.g. "A"@base) is in the Turtle language.

7. Parsing

The RDF 1.1 Concepts and Abstract Syntax specification [RDF11-CONCEPTS] defines three types of RDF Term: IRIs, literals and blank nodes. Literals are composed of a lexical form and an optional language tag [BCP47] or datatype IRI. An extra type, prefix, is used during parsing to map string identifiers to namespace IRIs. This section maps a string conforming to the grammar in section 6.5 Grammar to a set of triples by mapping strings matching productions and lexical tokens to RDF terms or their components (e.g. language tags, lexical forms of literals). Grammar productions change the parser state and emit triples.
7.1 Parser State

Parsing Turtle requires a state of five items:

    IRI baseURI — When the base production is reached, the second rule argument, IRIREF, is the base URI used for relative IRI resolution.
    Map[prefix -> IRI] namespaces — The second and third rule arguments (PNAME_NS and IRIREF) in the prefixID production assign a namespace name (IRIREF) for the prefix (PNAME_NS). Outside of a prefixID production, any PNAME_NS is substituted with the namespace. Note that the prefix may be an empty string, per the PNAME_NS production: (PN_PREFIX)? ":".
    Map[string -> blank node] bnodeLabels — A mapping from string to blank node.
    RDF_Term curSubject — The curSubject is bound to the subject production.
    RDF_Term curPredicate — The curPredicate is bound to the verb production. If token matched was "a", curPredicate is bound to the IRI http://www.w3.org/1999/02/22-rdf-syntax-ns#type.

7.2 RDF Term Constructors

This table maps productions and lexical tokens to RDF terms or components of RDF terms listed in section 7. Parsing:
production 	type 	procedure
IRIREF 	IRI 	The characters between "<" and ">" are taken, with the numeric escape sequences unescaped, to form the unicode string of the IRI. Relative IRI resolution is performed per Section 6.3.
PNAME_NS 	prefix 	When used in a prefixID or sparqlPrefix production, the prefix is the potentially empty unicode string matching the first argument of the rule is a key into the namespaces map.
IRI 	When used in a PrefixedName production, the iri is the value in the namespaces map corresponding to the first argument of the rule.
PNAME_LN 	IRI 	A potentially empty prefix is identified by the first sequence, PNAME_NS. The namespaces map MUST have a corresponding namespace. The unicode string of the IRI is formed by unescaping the reserved characters in the second argument, PN_LOCAL, and concatenating this onto the namespace.
STRING_LITERAL_SINGLE_QUOTE 	lexical form	The characters between the outermost "'"s are taken, with numeric and string escape sequences unescaped, to form the unicode string of a lexical form.
STRING_LITERAL_QUOTE 	lexical form	The characters between the outermost '"'s are taken, with numeric and string escape sequences unescaped, to form the unicode string of a lexical form.
STRING_LITERAL_LONG_SINGLE_QUOTE 	lexical form	The characters between the outermost "'''"s are taken, with numeric and string escape sequences unescaped, to form the unicode string of a lexical form.
STRING_LITERAL_LONG_QUOTE 	lexical form	The characters between the outermost '"""'s are taken, with numeric and string escape sequences unescaped, to form the unicode string of a lexical form.
LANGTAG 	language tag	The characters following the @ form the unicode string of the language tag.
RDFLiteral 	literal 	The literal has a lexical form of the first rule argument, String. If the '^^' iri rule matched, the datatype is iri and the literal has no language tag. If the LANGTAG rule matched, the datatype is rdf:langString and the language tag is LANGTAG. If neither matched, the datatype is xsd:string and the literal has no language tag.
INTEGER 	literal 	The literal has a lexical form of the input string, and a datatype of xsd:integer.
DECIMAL 	literal 	The literal has a lexical form of the input string, and a datatype of xsd:decimal.
DOUBLE 	literal 	The literal has a lexical form of the input string, and a datatype of xsd:double.
BooleanLiteral 	literal 	The literal has a lexical form of the true or false, depending on which matched the input, and a datatype of xsd:boolean.
BLANK_NODE_LABEL 	blank node 	The string matching the second argument, PN_LOCAL, is a key in bnodeLabels. If there is no corresponding blank node in the map, one is allocated.
ANON 	blank node 	A blank node is generated.
blankNodePropertyList	blank node 	A blank node is generated. Note the rules for blankNodePropertyList in the next section.
collection 	blank node 	For non-empty lists, a blank node is generated. Note the rules for collection in the next section.
IRI 	For empty lists, the resulting IRI is rdf:nil. Note the rules for collection in the next section.